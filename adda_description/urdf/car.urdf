<?xml version="1.0" ?>
<!-- =================================================================================== -->
<!-- |    This document was autogenerated by xacro from urdf/car.urdf.xacro            | -->
<!-- |    EDITING THIS FILE BY HAND IS NOT RECOMMENDED                                 | -->
<!-- =================================================================================== -->
<robot name="aDDa_S450" xmlns:xacro="http://www.ros.org/wiki/xacro">
  <!-- This file unifies all sensors that can be used on simulation, defined as xacro:macros -->
  <!-- Macro file for integrating ZED camera into a urdf
Implimented via the multicamera gazebo plugin
Has all of the appropriate parameters to run the
ZED camera at WVGA 100 fps
 -->
  <!-- check -->
  <!-- max_speed = 33 Km/h = 9.17 m/s
          axle_vel_limit = (2 * pi) * (max_speed / (pi * tire_dia)) =  39.02 rad/s -->
  <!-- 5,47 kg -->
  <!-- Materials (for RVIZ only)-->
  <material name="black">
    <color rgba="0 0 0 1"/>
  </material>
  <material name="grey">
    <color rgba="0.7 0.7 0.7 1"/>
  </material>
  <material name="red">
    <color rgba="1 0 0 1"/>
  </material>
  <material name="blue">
    <color rgba="0 0 1 1"/>
  </material>
  <!-- LINK DESCRIPTIONS -->
  <!-- The main (lower) body of the car as a box -->
  <link name="base_link">
    <visual>
      <!-- The origin of the car is at the center of the back, so we shift the visible and colliding parts -->
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://adda_description/meshes/car_united_reduced_2.dae" scale="0.001 0.001 0.001"/>
      </geometry>
      <material name="grey"/>
    </visual>
    <collision>
      <origin rpy="0 0 0" xyz="2.6295 0 0.4955"/>
      <geometry>
        <box size="5.259 2.13 0.991"/>
      </geometry>
    </collision>
    <inertial>
      <origin rpy="0 0 0" xyz="2.6295 0 0.4955"/>
      <mass value="2461.5"/>
      <inertia ixx="1.0" ixy="0.0" ixz="0.0" iyy="1.0" iyz="0.0" izz="1.0"/>
    </inertial>
  </link>
  <gazebo reference="base_link">
    <material>Gazebo/Chrome</material>
  </gazebo>
  <!-- The upper body of the car as a box -->
  <link name="roof">
    <collision>
      <geometry>
        <box size="2.659 1.75 0.5"/>
      </geometry>
    </collision>
    <!--TODO -->
    <inertial>
      <mass value="268.03"/>
      <inertia ixx="1.0" ixy="0.0" ixz="0.0" iyy="1.0" iyz="0.0" izz="1.0"/>
    </inertial>
  </link>
  <!-- Fixed Joint: Base Link to roof -->
  <joint name="base_link__roof" type="fixed">
    <parent link="base_link"/>
    <child link="roof"/>
    <origin xyz="2.2295 0 1.241"/>
  </joint>
  <!-- The rooftop of the car as a box -->
  <link name="rooftop">
    <collision>
      <geometry>
        <cylinder length="0.44" radius="0.2"/>
      </geometry>
    </collision>
    <!--TODO -->
    <inertial>
      <mass value="0.0001"/>
      <inertia ixx="1.0" ixy="0.0" ixz="0.0" iyy="1.0" iyz="0.0" izz="1.0"/>
    </inertial>
  </link>
  <!-- Fixed Joint: Base Link to rooftop -->
  <joint name="base_link__rooftop" type="fixed">
    <parent link="base_link"/>
    <child link="rooftop"/>
    <origin rpy="0 0 0" xyz="2.5195 0 1.711"/>
  </joint>
  <!-- SENSORS -->
  <joint name="velodyne_base_mount_joint" type="fixed">
    <origin rpy="0 0 0" xyz="0 0 0.23"/>
    <parent link="rooftop"/>
    <child link="velodyne_base_link"/>
  </joint>
  <link name="velodyne_base_link">
    <inertial>
      <mass value="0.83"/>
      <origin xyz="0 0 0.03585"/>
      <inertia ixx="0.000908059425" ixy="0" ixz="0" iyy="0.000908059425" iyz="0" izz="0.0011049624"/>
    </inertial>
    <visual>
      <geometry>
        <mesh filename="package://velodyne_description/meshes/VLP16_base_1.dae"/>
      </geometry>
    </visual>
    <visual>
      <geometry>
        <mesh filename="package://velodyne_description/meshes/VLP16_base_2.dae"/>
      </geometry>
    </visual>
    <collision>
      <origin rpy="0 0 0" xyz="0 0 0.03585"/>
      <geometry>
        <cylinder length="0.0717" radius="0.0516"/>
      </geometry>
    </collision>
  </link>
  <joint name="velodyne_base_scan_joint" type="fixed">
    <origin rpy="0 0 0" xyz="0 0 0.0377"/>
    <parent link="velodyne_base_link"/>
    <child link="velodyne"/>
  </joint>
  <link name="velodyne">
    <inertial>
      <mass value="0.01"/>
      <origin xyz="0 0 0"/>
      <inertia ixx="1e-7" ixy="0" ixz="0" iyy="1e-7" iyz="0" izz="1e-7"/>
    </inertial>
    <visual>
      <origin xyz="0 0 -0.0377"/>
      <geometry>
        <mesh filename="package://velodyne_description/meshes/VLP16_scan.dae"/>
      </geometry>
    </visual>
  </link>
  <!-- Gazebo requires the velodyne_gazebo_plugins package -->
  <gazebo reference="velodyne">
    <sensor name="velodyne-VLP16" type="ray">
      <pose>0 0 0 0 0 0</pose>
      <visualize>false</visualize>
      <update_rate>10</update_rate>
      <ray>
        <scan>
          <horizontal>
            <samples>1200</samples>
            <resolution>1</resolution>
            <min_angle>-3.14159265359</min_angle>
            <max_angle>3.14159265359</max_angle>
          </horizontal>
          <vertical>
            <samples>16</samples>
            <resolution>1</resolution>
            <min_angle>-0.261799387799</min_angle>
            <max_angle> 0.261799387799</max_angle>
          </vertical>
        </scan>
        <range>
          <min>0.3</min>
          <max>131.0</max>
          <resolution>0.001</resolution>
        </range>
        <noise>
          <type>gaussian</type>
          <mean>0.0</mean>
          <stddev>0.0</stddev>
        </noise>
      </ray>
      <plugin filename="libgazebo_ros_velodyne_laser.so" name="gazebo_ros_laser_controller">
        <topicName>/velodyne_points</topicName>
        <frameName>velodyne</frameName>
        <min_range>0.9</min_range>
        <max_range>130.0</max_range>
        <gaussianNoise>0.008</gaussianNoise>
      </plugin>
    </sensor>
  </gazebo>
  <joint name="zed_base_joint" type="fixed">
    <axis xyz="1 0 0"/>
    <!--origin xyz="0 0 0.2825"/-->
    <origin rpy="0 0 0" xyz="0.85 0 -0.1"/>
    <parent link="roof"/>
    <child link="zed_center"/>
  </joint>
  <link name="zed_center">
    <visual>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://adda_description/meshes/zed.dae"/>
      </geometry>
      <material name="light_grey">
        <color rgba="0.8 0.8 0.8 0.8"/>
      </material>
    </visual>
  </link>
  <link name="zed_left_camera"/>
  <link name="zed_right_camera"/>
  <link name="zed_left_camera_optical_frame"/>
  <joint name="zed_left_camera_joint" type="fixed">
    <parent link="zed_center"/>
    <child link="zed_left_camera"/>
    <origin rpy="0 0 0" xyz="0 0.06 0"/>
  </joint>
  <joint name="zed_right_camera_joint" type="fixed">
    <parent link="zed_center"/>
    <child link="zed_right_camera"/>
    <origin rpy="0 0 0" xyz="0 -0.06 0"/>
  </joint>
  <joint name="left_camera_optical_frame_joint" type="fixed">
    <origin rpy="0.0 0.0 0.0" xyz="0 0 0"/>
    <parent link="zed_left_camera"/>
    <child link="zed_left_camera_optical_frame"/>
  </joint>
  <gazebo reference="zed_left_camera_optical_frame">
    <sensor name="stereo_camera" type="multicamera">
      <!-- see MultiSenseSLPlugin.h for available modes -->
      <update_rate>100.0</update_rate>
      <camera name="zed_left">
        <!-- <pose>0 0.06 0 0 0 0</pose>  doesn't seem to work here -->
        <horizontal_fov>1.91986</horizontal_fov>
        <image>
          <width>672</width>
          <height>376</height>
          <format>R8G8B8</format>
        </image>
        <clip>
          <near>0.5</near>
          <far>20</far>
        </clip>
        <noise>
          <type>gaussian</type>
          <mean>0.0</mean>
          <stddev>0.007</stddev>
        </noise>
      </camera>
      <camera name="zed_right">
        <pose>0 -0.12 0 0 0 0</pose>
        <!-- Spec sheet says 80deg X 45deg @ 1024x544pix.  Based on feedback
           from teams, we're instead doing 80deg X 80deg @ 800x800pix. -->
        <horizontal_fov>1.91986</horizontal_fov>
        <image>
          <width>672</width>
          <height>376</height>
          <format>R8G8B8</format>
        </image>
        <clip>
          <near>0.5</near>
          <far>20</far>
        </clip>
        <noise>
          <type>gaussian</type>
          <mean>0.0</mean>
          <stddev>0.007</stddev>
        </noise>
      </camera>
      <plugin filename="libgazebo_ros_multicamera.so" name="stereo_camera_controller">
        <alwaysOn>true</alwaysOn>
        <updateRate>100.0</updateRate>
        <cameraName>zed</cameraName>
        <imageTopicName>image_raw</imageTopicName>
        <cameraInfoTopicName>camera_info</cameraInfoTopicName>
        <frameName>/zed_frame</frameName>
        <!--<rightFrameName>right_camera_optical_frame</rightFrameName>-->
        <hackBaseline>0.120</hackBaseline>
        <!-- the baseline shifts the left camera -->
        <distortionK1>0.0</distortionK1>
        <distortionK2>0.0</distortionK2>
        <distortionK3>0.0</distortionK3>
        <distortionT1>0.0</distortionT1>
        <distortionT2>0.0</distortionT2>
      </plugin>
    </sensor>
  </gazebo>
  <joint name="adma_imu_joint" type="fixed">
    <axis xyz="1 0 0"/>
    <origin rpy="0 0 0" xyz="0.5 0 0.4"/>
    <parent link="base_link"/>
    <child link="adma_imu_link"/>
  </joint>
  <link name="adma_imu_link">
    <inertial>
      <mass value="0.001"/>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <inertia ixx="0.0001" ixy="0" ixz="0" iyy="0.000001" iyz="0" izz="0.0001"/>
    </inertial>
    <visual>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <box size="0.16 0.1 0.2"/>
      </geometry>
    </visual>
    <collision>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <box size="0.16 0.1 0.2"/>
      </geometry>
    </collision>
  </link>
  <gazebo>
    <plugin filename="libhector_gazebo_ros_imu.so" name="adma_imu_controller">
      <alwaysOn>true</alwaysOn>
      <topicName>imu/data</topicName>
      <serviceName>adma_imu_imu/service</serviceName>
      <bodyName>adma_imu_link</bodyName>
      <updateRate>10.0</updateRate>
      <gaussianNoise>0.005</gaussianNoise>
      <!-- orientation parameters -->
      <yawOffset>0.0</yawOffset>
      <yawDrift>0.02</yawDrift>
      <yawGaussianNoise>0.01</yawGaussianNoise>
      <rateOffset>0.0 0.0 0.0</rateOffset>
      <rateDrift>0.002 0.002 0.002</rateDrift>
      <rateGaussianNoise>0.001 0.001 0.001</rateGaussianNoise>
      <accelOffset>0.0 0.0 0.0</accelOffset>
      <accelDrift>0.005 0.005 0.005</accelDrift>
      <accelGaussianNoise>0.005 0.005 0.005</accelGaussianNoise>
    </plugin>
  </gazebo>
  <joint name="vector_joint" type="fixed">
    <axis xyz="1 0 0"/>
    <origin rpy="0 0 0" xyz="0.6 0 0.4"/>
    <parent link="roof"/>
    <child link="vector_link"/>
  </joint>
  <link name="vector_link">
    <inertial>
      <mass value="0.001"/>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <inertia ixx="0.0001" ixy="0" ixz="0" iyy="0.000001" iyz="0" izz="0.0001"/>
    </inertial>
    <visual>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <box size="0.1 0.1 0.1"/>
      </geometry>
    </visual>
    <collision>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <box size="0.1 0.1 0.1"/>
      </geometry>
    </collision>
  </link>
  <gazebo>
    <plugin filename="libhector_gazebo_ros_gps.so" name="vector_controller">
      <alwaysOn>true</alwaysOn>
      <topicName>hector_gps/fix</topicName>
      <bodyName>vector_link</bodyName>
      <updateRate>100.0</updateRate>
      <gaussianNoise>0.005 0.005 0.005</gaussianNoise>
      <!-- orientation parameters -->
      <velocityTopicName>hector_gps/velocity</velocityTopicName>
      <referenceLatitude>49.9</referenceLatitude>
      <referenceLongitude>8.9</referenceLongitude>
      <referenceHeading>0.0</referenceHeading>
      <referenceAltitude>0.0</referenceAltitude>
      <offset>0 0 0</offset>
      <drift>0.001 0.01 0.001</drift>
      <driftFrequency>0 0 0</driftFrequency>
      <velocityOffset>0 0 0 </velocityOffset>
      <velocityDrift> 0.00001 0.00001 0.00001</velocityDrift>
      <velocityDriftFrequency>100 100 100 </velocityDriftFrequency>
      <velocityGaussianNoise>0.001 0.001 0.001</velocityGaussianNoise>
    </plugin>
  </gazebo>
  <!--Adma GPS -->
  <joint name="adma_gps_joint" type="fixed">
    <axis xyz="0 1 0"/>
    <origin rpy="0 0 0" xyz="0.5 0 0.4"/>
    <parent link="base_link"/>
    <child link="adma_gps_base_link"/>
  </joint>
  <link name="adma_gps_base_link">
    <inertial>
      <mass value="0.001"/>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <inertia ixx="0.0001" ixy="0" ixz="0" iyy="0.000001" iyz="0" izz="0.0001"/>
    </inertial>
    <visual>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <material name="red">
        <color rgba="1 0 0 0.8"/>
      </material>
      <geometry>
        <box size="0.01 0.01 0.01"/>
      </geometry>
    </visual>
    <collision>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <box size="0.01 0.01 0.01"/>
      </geometry>
    </collision>
  </link>
  <gazebo reference="adma_gps_base_link">
    <material>Gazebo/Red</material>
    <gravity>true</gravity>
  </gazebo>
  <gazebo>
    <plugin filename="libhector_gazebo_ros_gps.so" name="adma_gps_controller">
      <alwaysOn>1</alwaysOn>
      <updateRate>10</updateRate>
      <bodyName>adma_gps_base_link</bodyName>
      <!-- must be the link of the gps device, not the base_link or base_footprint -->
      <frameId>adma_gps_base_link</frameId>
      <topicName>gps/fix</topicName>
      <!-- Appleton Tower coordinates -->
      <referenceLatitude>49.9</referenceLatitude>
      <referenceLongitude>8.9</referenceLongitude>
      <!-- To set heading in ENU orientation (degrees) -->
      <velocityTopicName>gps/velocity</velocityTopicName>
      <drift>0.0 0.0 0.0</drift>
      <gaussianNoise>0.00001 0.00001 0.00001</gaussianNoise>
      <velocityDrift>0.0 0.0 0.0</velocityDrift>
      <velocityGaussianNoise>0.0 0.0 0.0</velocityGaussianNoise>
    </plugin>
  </gazebo>
  <!--ground Truth -->
  <joint name="ground_truth_joint" type="fixed">
    <origin rpy="0 0 0" xyz="1.1915 0 0"/>
    <parent link="base_link"/>
    <child link="ground_truth_base_link"/>
  </joint>
  <link name="ground_truth_link">
    <inertial>
      <mass value="0.001"/>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <inertia ixx="0.0001" ixy="0" ixz="0" iyy="0.000001" iyz="0" izz="0.0001"/>
    </inertial>
    <visual>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <material name="red">
        <color rgba="1 0 0 0.8"/>
      </material>
      <geometry>
        <box size="0.01 0.01 0.01"/>
      </geometry>
    </visual>
  </link>
  <plugin filename="libgazebo_ros_p3d.so" name="p3d_base_controller">
    <alwaysOn>true</alwaysOn>
    <updateRate>10.0</updateRate>
    <bodyName>ground_truth_link</bodyName>
    <topicName>ground_truth/state</topicName>
    <gaussianNoise>0.00</gaussianNoise>
    <frameName>world</frameName>
    <xyzOffsets>0 0 0</xyzOffsets>
    <rpyOffsets>0 0 0</rpyOffsets>
  </plugin>
  <joint name="front_right_shock" type="fixed">
    <parent link="base_link"/>
    <child link="right_steering_link"/>
    <origin xyz="4.3505 -0.7995 0.0"/>
  </joint>
  <link name="right_steering_link">
    <inertial>
      <mass value="0.001"/>
      <inertia ixx="0.001" ixy="0" ixz="0" iyy="0.001" iyz="0" izz="0.001"/>
    </inertial>
  </link>
  <joint name="right_steering_joint" type="revolute">
    <parent link="right_steering_link"/>
    <child link="front_right_axle_carrier"/>
    <axis xyz="0 0 1"/>
    <limit effort="500" lower="-0.785398163" upper="0.785398163" velocity="25"/>
  </joint>
  <transmission name="right_steering_trans">
    <type>transmission_interface/SimpleTransmission</type>
    <joint name="right_steering_joint">
      <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
    </joint>
    <actuator name="right_steering_act">
      <mechanicalReduction>1</mechanicalReduction>
    </actuator>
  </transmission>
  <link name="front_right_axle_carrier">
    <inertial>
      <mass value="0.001"/>
      <inertia ixx="0.001" ixy="0" ixz="0" iyy="0.001" iyz="0" izz="0.001"/>
    </inertial>
    <gazebo reference="front_right_axle_carrier">
      <material>Gazebo/Black</material>
    </gazebo>
  </link>
  <!-- The left and right axles have the same axis so that identical
             rotation values cause the wheels to rotate in the same direction. -->
  <joint name="front_right_axle" type="continuous">
    <axis rpy="0 0 0" xyz="0 -1 0"/>
    <parent link="front_right_axle_carrier"/>
    <child link="front_right_wheel"/>
    <!-- <origin rpy="${degrees_90} 0 ${degrees_180}"/>-->
    <limit effort="100" velocity="177.03"/>
    <joint_properties damping="0.01" friction="{wheel_joint_friction}"/>
  </joint>
  <!-- This block connects the wheel joint to an actuator (motor), which informs both
             simulation and visualization of the robot -->
  <transmission name="front_right_axle_trans">
    <type>transmission_interface/SimpleTransmission</type>
    <joint name="front_right_axle">
      <!-- hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface -->
      <hardwareInterface>hardware_interface/VelocityJointInterface</hardwareInterface>
    </joint>
    <actuator name="front_right_axle_act">
      <mechanicalReduction>1</mechanicalReduction>
    </actuator>
  </transmission>
  <link name="front_right_wheel">
    <visual>
      <origin rpy="0 0 1.57079633"/>
      <geometry>
        <mesh filename="package://adda_description/meshes/wheel_normal.dae" scale="0.001 0.001 0.001"/>
      </geometry>
      <material name="black"/>
    </visual>
    <collision>
      <origin rpy="1.57079633 0 0"/>
      <geometry>
        <cylinder length="0.245" radius="0.339"/>
      </geometry>
    </collision>
    <inertial>
      <mass value="5.47"/>
      <inertia ixx="0.226395550833" ixy="0" ixz="0" iyy="0.226395550833" iyz="0" izz="0.39806831"/>
    </inertial>
  </link>
  

         This block provides the simulator (Gazebo) with information on a few additional
        physical properties. See http://gazebosim.org/tutorials/?tut=ros_urdf for more--&gt;
        
  <gazebo reference="front_right_wheel">
    <mu1 value="1.0"/>
    <mu2 value="1.0"/>
    <kp value="10000000.0"/>
    <kd value="1.0"/>
    <fdir1 value="1 0 0"/>
    <material>Gazebo/Grey</material>
    <turnGravityOff>false</turnGravityOff>
  </gazebo>
  <joint name="front_left_shock" type="fixed">
    <parent link="base_link"/>
    <child link="left_steering_link"/>
    <origin xyz="4.3505 0.7995 0.0"/>
  </joint>
  <link name="left_steering_link">
    <inertial>
      <mass value="0.001"/>
      <inertia ixx="0.001" ixy="0" ixz="0" iyy="0.001" iyz="0" izz="0.001"/>
    </inertial>
  </link>
  <joint name="left_steering_joint" type="revolute">
    <parent link="left_steering_link"/>
    <child link="front_left_axle_carrier"/>
    <axis xyz="0 0 1"/>
    <limit effort="500" lower="-0.785398163" upper="0.785398163" velocity="25"/>
  </joint>
  <transmission name="left_steering_trans">
    <type>transmission_interface/SimpleTransmission</type>
    <joint name="left_steering_joint">
      <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
    </joint>
    <actuator name="left_steering_act">
      <mechanicalReduction>1</mechanicalReduction>
    </actuator>
  </transmission>
  <link name="front_left_axle_carrier">
    <inertial>
      <mass value="0.001"/>
      <inertia ixx="0.001" ixy="0" ixz="0" iyy="0.001" iyz="0" izz="0.001"/>
    </inertial>
    <gazebo reference="front_left_axle_carrier">
      <material>Gazebo/Black</material>
    </gazebo>
  </link>
  <!-- The left and right axles have the same axis so that identical
             rotation values cause the wheels to rotate in the same direction. -->
  <joint name="front_left_axle" type="continuous">
    <axis rpy="0 0 0" xyz="0 -1 0"/>
    <parent link="front_left_axle_carrier"/>
    <child link="front_left_wheel"/>
    <!-- <origin rpy="${degrees_90} 0 ${degrees_180}"/>-->
    <limit effort="100" velocity="177.03"/>
    <joint_properties damping="0.01" friction="{wheel_joint_friction}"/>
  </joint>
  <!-- This block connects the wheel joint to an actuator (motor), which informs both
             simulation and visualization of the robot -->
  <transmission name="front_left_axle_trans">
    <type>transmission_interface/SimpleTransmission</type>
    <joint name="front_left_axle">
      <!-- hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface -->
      <hardwareInterface>hardware_interface/VelocityJointInterface</hardwareInterface>
    </joint>
    <actuator name="front_left_axle_act">
      <mechanicalReduction>1</mechanicalReduction>
    </actuator>
  </transmission>
  <link name="front_left_wheel">
    <visual>
      <origin rpy="0 0 -1.57079633"/>
      <geometry>
        <mesh filename="package://adda_description/meshes/wheel_normal.dae" scale="0.001 0.001 0.001"/>
      </geometry>
      <material name="black"/>
    </visual>
    <collision>
      <origin rpy="1.57079633 0 0"/>
      <geometry>
        <cylinder length="0.245" radius="0.339"/>
      </geometry>
    </collision>
    <inertial>
      <mass value="5.47"/>
      <inertia ixx="0.226395550833" ixy="0" ixz="0" iyy="0.226395550833" iyz="0" izz="0.39806831"/>
    </inertial>
  </link>
  

         This block provides the simulator (Gazebo) with information on a few additional
        physical properties. See http://gazebosim.org/tutorials/?tut=ros_urdf for more--&gt;
        
  <gazebo reference="front_left_wheel">
    <mu1 value="1.0"/>
    <mu2 value="1.0"/>
    <kp value="10000000.0"/>
    <kd value="1.0"/>
    <fdir1 value="1 0 0"/>
    <material>Gazebo/Grey</material>
    <turnGravityOff>false</turnGravityOff>
  </gazebo>
  <joint name="rear_right_shock" type="fixed">
    <parent link="base_link"/>
    <child link="rear_right_axle_carrier"/>
    <origin xyz="1.1915 -0.7995 0.2"/>
  </joint>
  <link name="rear_right_axle_carrier">
    <inertial>
      <mass value="0.001"/>
      <inertia ixx="0.001" ixy="0" ixz="0" iyy="0.001" iyz="0" izz="0.001"/>
    </inertial>
    <gazebo reference="rear_right_axle_carrier">
      <material>Gazebo/Black</material>
    </gazebo>
  </link>
  <!-- The left and right axles have the same axis so that identical
             rotation values cause the wheels to rotate in the same direction. -->
  <joint name="rear_right_axle" type="continuous">
    <axis rpy="0 0 0" xyz="0 -1 0"/>
    <parent link="rear_right_axle_carrier"/>
    <child link="rear_right_wheel"/>
    <!-- <origin rpy="${degrees_90} 0 ${degrees_180}"/>-->
    <limit effort="100" velocity="177.03"/>
    <joint_properties damping="0.01" friction="{wheel_joint_friction}"/>
  </joint>
  <!-- This block connects the wheel joint to an actuator (motor), which informs both
             simulation and visualization of the robot -->
  <transmission name="rear_right_axle_trans">
    <type>transmission_interface/SimpleTransmission</type>
    <joint name="rear_right_axle">
      <!-- hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface -->
      <hardwareInterface>hardware_interface/VelocityJointInterface</hardwareInterface>
    </joint>
    <actuator name="rear_right_axle_act">
      <mechanicalReduction>1</mechanicalReduction>
    </actuator>
  </transmission>
  <link name="rear_right_wheel">
    <visual>
      <origin rpy="0 0 1.57079633"/>
      <geometry>
        <mesh filename="package://adda_description/meshes/wheel_normal.dae" scale="0.001 0.001 0.001"/>
      </geometry>
      <material name="black"/>
    </visual>
    <collision>
      <origin rpy="1.57079633 0 0"/>
      <geometry>
        <cylinder length="0.245" radius="0.339"/>
      </geometry>
    </collision>
    <inertial>
      <mass value="5.47"/>
      <inertia ixx="0.226395550833" ixy="0" ixz="0" iyy="0.226395550833" iyz="0" izz="0.39806831"/>
    </inertial>
  </link>
  

         This block provides the simulator (Gazebo) with information on a few additional
        physical properties. See http://gazebosim.org/tutorials/?tut=ros_urdf for more--&gt;
        
  <gazebo reference="rear_right_wheel">
    <mu1 value="1.0"/>
    <mu2 value="1.0"/>
    <kp value="10000000.0"/>
    <kd value="1.0"/>
    <fdir1 value="1 0 0"/>
    <material>Gazebo/Grey</material>
    <turnGravityOff>false</turnGravityOff>
  </gazebo>
  <joint name="rear_left_shock" type="fixed">
    <parent link="base_link"/>
    <child link="rear_left_axle_carrier"/>
    <origin xyz="1.1915 0.7995 0.2"/>
  </joint>
  <link name="rear_left_axle_carrier">
    <inertial>
      <mass value="0.001"/>
      <inertia ixx="0.001" ixy="0" ixz="0" iyy="0.001" iyz="0" izz="0.001"/>
    </inertial>
    <gazebo reference="rear_left_axle_carrier">
      <material>Gazebo/Black</material>
    </gazebo>
  </link>
  <!-- The left and right axles have the same axis so that identical
             rotation values cause the wheels to rotate in the same direction. -->
  <joint name="rear_left_axle" type="continuous">
    <axis rpy="0 0 0" xyz="0 -1 0"/>
    <parent link="rear_left_axle_carrier"/>
    <child link="rear_left_wheel"/>
    <!-- <origin rpy="${degrees_90} 0 ${degrees_180}"/>-->
    <limit effort="100" velocity="177.03"/>
    <joint_properties damping="0.01" friction="{wheel_joint_friction}"/>
  </joint>
  <!-- This block connects the wheel joint to an actuator (motor), which informs both
             simulation and visualization of the robot -->
  <transmission name="rear_left_axle_trans">
    <type>transmission_interface/SimpleTransmission</type>
    <joint name="rear_left_axle">
      <!-- hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface -->
      <hardwareInterface>hardware_interface/VelocityJointInterface</hardwareInterface>
    </joint>
    <actuator name="rear_left_axle_act">
      <mechanicalReduction>1</mechanicalReduction>
    </actuator>
  </transmission>
  <link name="rear_left_wheel">
    <visual>
      <origin rpy="0 0 -1.57079633"/>
      <geometry>
        <mesh filename="package://adda_description/meshes/wheel_normal.dae" scale="0.001 0.001 0.001"/>
      </geometry>
      <material name="black"/>
    </visual>
    <collision>
      <origin rpy="1.57079633 0 0"/>
      <geometry>
        <cylinder length="0.245" radius="0.339"/>
      </geometry>
    </collision>
    <inertial>
      <mass value="5.47"/>
      <inertia ixx="0.226395550833" ixy="0" ixz="0" iyy="0.226395550833" iyz="0" izz="0.39806831"/>
    </inertial>
  </link>
  

         This block provides the simulator (Gazebo) with information on a few additional
        physical properties. See http://gazebosim.org/tutorials/?tut=ros_urdf for more--&gt;
        
  <gazebo reference="rear_left_wheel">
    <mu1 value="1.0"/>
    <mu2 value="1.0"/>
    <kp value="10000000.0"/>
    <kd value="1.0"/>
    <fdir1 value="1 0 0"/>
    <material>Gazebo/Grey</material>
    <turnGravityOff>false</turnGravityOff>
  </gazebo>
  <!-- Gazebo plugin for ROS Control -->
  <gazebo>
    <plugin filename="libgazebo_ros_control.so" name="gazebo_ros_control">
      <controlPeriod>0.001</controlPeriod>
      <robotNamespace>/adda</robotNamespace>
      <robotParam>robot_description</robotParam>
      <robotSimType>gazebo_ros_control/DefaultRobotHWSim</robotSimType>
    </plugin>
  </gazebo>
</robot>

